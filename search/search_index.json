{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the WolkenlosAPI documentation!","text":"<p>This is the documentation for the WolkenlosAPI. WolkenlosAPI is a Kotlin  library for Minecraft (Spigot). It adds a lot of features for building own  plugins for Wolkenlos.</p>"},{"location":"#version","title":"Version","text":"<p>Latest version: <code>1.1.3</code></p>"},{"location":"#features","title":"Features","text":"Feature Description Added in ItemBuilder A class to create ItemStacks with ease 1.1.0 HeadBuilder A class to create Heads 1.1.3 GUI A API to create GUIs with ease 1.0.0 Listener A class to simply create Listeners 1.0.0 AdventureExtension A extension that add some helpfully functions 1.1.0"},{"location":"#coming-soon","title":"Coming soon","text":"Feature Description Coming in HologramAPI An API to create and manage holograms 1.1.4 WTab integration Allows you to access the prefix 1.1.4 NPC-API An API to create NPCs 1.1.5 GUI-Animations A feature to animate GUIs 1.1.6"},{"location":"#made-for-wolkenlos","title":"Made for Wolkenlos","text":"<p>This API is made for the Wolkenlos Minecraft server. It is not tested on other  servers. If you want to use it on your server, you can do it, but we can't guarantee that it will work.</p>"},{"location":"#contributing-only-for-wolkenlos-team","title":"Contributing (Only for Wolkenlos-Team)","text":"<p>If you want to contribute to this project, you can do it. Fork this repository and create a pull request. We will check it and maybe merge it.</p>"},{"location":"#authors","title":"Authors","text":"<ul> <li>Antonio Wilczynski - Lead Developer</li> <li>Tobi - Developer</li> <li>Hofy - Web-Developer</li> </ul>"},{"location":"pages/extensions/adventure/","title":"AdventureExtensions","text":"<p>This adds some useful extensions to the AdventureAPI.</p>"},{"location":"pages/extensions/adventure/#component","title":"Component","text":"<p>To create a component, you can use the <code>component</code> method. This method uses the Adventure Color Codes.</p> KotlinJava Main.kt<pre><code>val component = component(\"Hello World\")\n</code></pre> Main.java<pre><code>Component component = AdventureExtensions.component(\"Hello World\");\n</code></pre>"},{"location":"pages/extensions/adventure/#context","title":"Context","text":"<p>To get the context of a component, you can use the <code>context</code> method. This will return a <code>String</code> with the context of the component.</p> KotlinJava Main.kt<pre><code>val context = context(component)\n</code></pre> Main.java<pre><code>String context = AdventureExtensions.context(component);\n</code></pre>"},{"location":"pages/getting-started/implementation/","title":"Implementation","text":"<p>This section describes how to implement the API in your project. It is made for PaperMC plugins, so we highly recommend you to use PaperMC as your server software.</p> MavenGradle <p>To use the API in your project, you have to add the following dependency to your <code>pom.xml</code>: pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;eu.wolkenlosmc&lt;/groupId&gt;\n    &lt;artifactId&gt;wolkenlosapi&lt;/artifactId&gt;\n    &lt;version&gt;1.1.3&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>To use the API in your project, you have to add the following dependency to your <code>build.gradle</code>: build.gradle.kts<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"eu.wolkenlosmc:wolkenlosapi:1.1.3\")\n}\n</code></pre></p>"},{"location":"pages/getting-started/intigration/","title":"Intigration","text":"<p>This is a small guide how to integrate the API in your minecraft plugin. </p> KotlinJava Recommended <p>We recommend you to use Kotlin as your programming language, because the API is written in Kotlin. But you can also use Java if you want.</p> <p>To use this API you have to implement it, you cann see how to do this in the Implementation section. Then you have to register the API in your <code>onEnable</code> method: Main.kt<pre><code>companion object {\n    lateinit var api: WolkenlosAPI\n}\n\noverride fun onEnable() {\n    api = WolkenlosAPI(this)\n}\n</code></pre></p> <p>To use this API you have to implement it, you cann see how to do this in the Implementation section. Then you have to register the API in your <code>onEnable</code> method: Main.java<pre><code>public class Main extends JavaPlugin {\n    public static WolkenlosAPI api;\n\n    @Override\n    public void onEnable() {\n        api = new WolkenlosAPI(this);\n    }\n}\n</code></pre></p> <p>Warning</p> <p>The <code>WolkenlosAPI</code> was never tested in Java, so it may not work.</p>"},{"location":"pages/gui/click-event/","title":"GUIClickEvent","text":"<p>This event is called when a player clicks on an item in a GUI. </p>"},{"location":"pages/gui/click-event/#properties","title":"Properties","text":"Name Type Description <code>bukkitEvent</code> <code>InventoryClickEvent</code> The standard bukkit event <code>guiInstance</code> <code>GUIInstance</code> The GUIInstance of the clicked GUI <code>player</code> <code>Player</code> The Player who clicked the gui <p>Important</p> <p>This is not a typical Bukkit event.  It is a custom event called by the GUIManager.  It is not registered in the Bukkit event system.</p>"},{"location":"pages/gui/close-event/","title":"GUICloseEvent","text":"<p>This event is called when a player closes the GUI.</p>"},{"location":"pages/gui/close-event/#properties","title":"Properties","text":"Name Type Description <code>bukkitEvent</code> <code>InventoryCloseEvent</code> The standard bukkit event <code>guiInstance</code> <code>GUIInstance</code> The GUIInstance of the clicked GUI <code>player</code> <code>Player</code> The Player who clicked the gui <p>Important</p> <p>This is not a typical Bukkit event.  It is a custom event called by the GUIManager.  It is not registered in the Bukkit event system.</p>"},{"location":"pages/gui/create/","title":"GUI's","text":"<p>The API provides a simple way to create GUI's. </p>"},{"location":"pages/gui/create/#create-a-gui","title":"Create a GUI","text":"<p>There are two ways to create and open a GUI. The first way is to create a new GUI object and then open it. The second way is to use the <code>Player.gui()</code> method.</p> KotlinJava GUI.kt<pre><code>// This is an example to create a GUI\nval gui = GUI(GUIType.FIVTY_FOUR, component(\"Test\")) {\n    // This adds a page to the GUI\n    page(0) {\n    // This adds an item to the GUI\n        item(0, ItemStack(Material.DIAMOND))\n    }\n}\n\n// This opens the GUI\ngui.open(player) \n// OR\nplayer.openGUI(gui)\n</code></pre> GUI.java<pre><code>// This is an example to create a GUI\nGUI gui = new GUI(GUIType.FIVTY_FOUR, component(\"Test\"), gui -&gt; {\n    // This adds a page to the GUI\n    gui.page(0, page -&gt; {\n        // This adds an item to the GUI\n        page.item(0, new ItemStack(Material.DIAMOND));\n    });\n});\n\n// This opens the GUI\ngui.open(player);\n// OR\nplayer.openGUI(gui);\n</code></pre> <p>Or you can use the <code>Player.gui()</code> method:</p> KotlinJava GUI.kt<pre><code>// This is a example to create a GUI\nplayer.gui(GUIType.FIVTY_FOUR, component(\"Test\")) {\n    // This adds a page to the GUI\n    page(0) {\n    // This adds a item to the GUI\n        item(0, ItemStack(Material.DIAMOND))\n    }\n}\n</code></pre> GUI.java<pre><code>// This is a example to create a GUI\nplayer.gui(GUIType.FIVTY_FOUR, component(\"Test\"), gui -&gt; {\n    // This adds a page to the GUI\n    gui.page(0, page -&gt; {\n        // This adds a item to the GUI\n        page.item(0, new ItemStack(Material.DIAMOND));\n    });\n});\n</code></pre>"},{"location":"pages/gui/create/#onclose","title":"onClose","text":"<p>The <code>onClose</code> method is called when the GUI is closed. This method is called when the GUI is closed by the player or when the GUI is closed by the server. It returns a GUICloseEvent.</p> KotlinJava GUI.kt<pre><code>// This is a example to create a GUI\nplayer.gui(GUIType.FIVTY_FOUR, component(\"Test\")) {\n\n    // This is called when the GUI is closed by the player\n    onClose { event -&gt;\n        // Your code here\n    }\n}\n</code></pre> GUI.java<pre><code>// This is a example to create a GUI\nplayer.gui(GUIType.FIVTY_FOUR, component(\"Test\"), gui -&gt; {\n\n    // This is called when the GUI is closed by the player\n    gui.onClose(event -&gt; {\n        // Your code here\n    });\n});\n</code></pre>"},{"location":"pages/gui/item/","title":"GUI Item","text":"<p>This is a guide to creating items in a GUI. You can create items in a GUI with the <code>item</code> method.</p>"},{"location":"pages/gui/item/#create","title":"Create","text":"<p>You can create an item in a GUI with the <code>item</code> method. Als every form from the  GUI Page is an item, so you can use all forms as items.</p> KotlinJava GUI.kt<pre><code>page(index) {\n    item(index, itemStack)\n}\n</code></pre> GUI.java<pre><code>page(index, page -&gt; {\n    page.item(index, itemStack);\n});\n</code></pre>"},{"location":"pages/gui/item/#onclick","title":"onClick","text":"<p>You can add a <code>onClick</code> event to an item. This event is called when a player  clicks on the item. It returns a GUIClickEvent.</p> KotlinJava GUI.kt<pre><code>page(index) {\n    item(index, itemStack) {\n        onClick = { event -&gt;\n            // Your code\n        }\n    }\n}\n</code></pre> GUI.java<pre><code>page(index, page -&gt; {\n    page.item(index, itemStack, item -&gt; {\n        item.onClick(event -&gt; {\n            // Your code\n        });\n    });\n});\n</code></pre>"},{"location":"pages/gui/item/#conditions","title":"Conditions","text":"<p>You can add conditions to an item. When the condition is true, the Condition-Item is shown.  When the condition is false, the normal item is shown. You can use the <code>condition</code> method to  add a condition to an item.2 lol</p> KotlinJava GUI.kt<pre><code>page(index) {\n    item(index, itemStack) {\n        condition(contition, itemStack)\n    }\n}\n</code></pre> GUI.java<pre><code>page(index, page -&gt; {\n    page.item(index, itemStack, item -&gt; {\n        item.condition(contition, itemStack);\n    });\n});\n</code></pre>"},{"location":"pages/gui/page/","title":"GUI Pages","text":"<p>This section describes how to create a GUI page. A GUI page is a page in a GUI.  You can create as many pages as you want and navigate between them.</p>"},{"location":"pages/gui/page/#creating-a-gui-page","title":"Creating a GUI page","text":"<p>To create a GUI page you have to call the <code>page</code> method in the GUI builder. This method allows you to create a GUI page in a GUI.</p> KotlinJava GUI.kt<pre><code>page(index) {\n    // here you can register items and more\n    item(index, itemStack)\n}\n</code></pre> GUI.java<pre><code>page(index, page -&gt; {\n    // here you can register items and more\n    page.item(index, itemStack);\n});\n</code></pre>"},{"location":"pages/gui/page/#background","title":"Background","text":"<p>You can set a background for a page. This background is an item displayed in every slot of the page.</p> KotlinJava GUI.kt<pre><code>page(index) {\n    background(itemStack)\n    // OR\n    background(material)\n    // In this case the amount is 1 and the display name is null\n}\n</code></pre> GUI.java<pre><code>page(index, page -&gt; {\n    page.background(itemStack);\n    // OR\n    page.background(material);\n    // In this case the amount is 1 and the display name is null\n});\n</code></pre>"},{"location":"pages/gui/page/#forms","title":"Forms","text":"<p>You can create a form of items in a GUI page. A form is a grid of items. Also, you can add a onClick event to the form. This event is called when a player clicks on any item in the form.</p>"},{"location":"pages/gui/page/#row","title":"Row","text":"<p>You can create a row of items in a GUI page. A row is a horizontal line of items. </p> KotlinJava GUI.kt<pre><code>page(index) {\n    row(Row.ONE, itemStack)\n}\n</code></pre> GUI.java<pre><code>page(index, page -&gt; {\n    page.row(Row.ONE, itemStack);\n});\n</code></pre>"},{"location":"pages/gui/page/#column","title":"Column","text":"<p>You can create a column of items in a GUI page. A column is a vertical line of items.</p> KotlinJava GUI.kt<pre><code>page(index) {\n    column(Column.ONE, itemStack)\n}\n</code></pre> GUI.java<pre><code>page(index, page -&gt; {\n    page.column(Column.ONE, itemStack);\n});\n</code></pre>"},{"location":"pages/gui/page/#fill","title":"Fill","text":"<p>You can fill a specific area of a GUI page with items.</p> KotlinJava GUI.kt<pre><code>page(index) {\n    fill(startSlot, endSlot, itemStack)\n}\n</code></pre> GUI.java<pre><code>page(index, page -&gt; {\n    page.fill(startSlot, endSlot, itemStack);\n});\n</code></pre>"},{"location":"pages/gui/page/#square","title":"Square","text":"<p>You can create a square of items in a GUI page. A square is a grid of items.</p> KotlinJava GUI.kt<pre><code>page(index) {\n    square(startSlot, height, width, itemStack)\n}\n</code></pre> GUI.java<pre><code>page(index, page -&gt; {\n    page.square(startSlot, height, width, itemStack);\n});\n</code></pre>"},{"location":"pages/gui/page/#copy-from-another-page","title":"Copy from another page","text":"<p>You can copy the content of another page to a page. This is useful if you want to create a page with the same content as another page.</p> KotlinJava GUI.kt<pre><code>val pageOne = page(index) {\n    copyFrom(page)\n}\n\npage(index) {\n    copyFrom(pageOne)\n}\n\n// OR\n\npage(index) {\n    copyFrom(pageIndex)\n}\n</code></pre> GUI.java<pre><code>Page pageOne = page(index, page -&gt; {\n    page.copyFrom(page);\n});\n\npage(index, page -&gt; {\n    page.copyFrom(pageOne);\n});\n\n// OR\n\npage(index, page -&gt; {\n    page.copyFrom(pageIndex);\n});\n</code></pre>"},{"location":"pages/listener/listener/","title":"Listeners","text":"<p>This page describes how to use Listeners with the API. As you know there are already ways to register listeners in Bukkit, but we made it a lot easier for you.</p>"},{"location":"pages/listener/listener/#registering-listeners","title":"Registering Listeners","text":"<p>To register a listener you have to call the <code>listen</code> method. This method allows you to register Listeners in a method.</p> KotlinJava Listener.kt<pre><code>// This is a example to register a Listener\nfun registerListeners() {\n    listen&lt;PlayerJoinEvent&gt; {\n        it.player.sendMessage(\"Welcome to the server!\")\n    }\n}\n\n// This is a example to register a Listener in a method\n// This method is for example called when you use a command\nfun onCommand() {\n    listen&lt;PlayerJoinEvent&gt; {\n        it.player.sendMessage(\"Welcome to the server!\")\n    }\n}\n</code></pre> Listener.java<pre><code>// This is a example to register a Listener\npublic void registerListeners() {\n    WolkenlosAPI.listen(PlayerJoinEvent.class, event -&gt; {\n        event.getPlayer().sendMessage(\"Welcome to the server!\");\n    });\n}\n\n// This is a example to register a Listener in a method\n// This method is for example called when you use a command\npublic void onCommand() {\n    WolkenlosAPI.listen(PlayerJoinEvent.class, event -&gt; {\n        event.getPlayer().sendMessage(\"Welcome to the server!\");\n    });\n}\n</code></pre>"},{"location":"pages/listener/listener/#unregister-listeners","title":"Unregister Listeners","text":"<p>To unregister a listener you have to save the Listener in a variable  and then call the <code>unregister()</code> method.</p> KotlinJava Listener.kt<pre><code>// This is a example to unregister a Listener\nval listener = listen&lt;PlayerJoinEvent&gt; {\n    it.player.sendMessage(\"Welcome to the server!\")\n}\nlistener.unregister()\n</code></pre> Listener.java<pre><code>// This is a example to unregister a Listener\nListener listener = WolkenlosAPI.listen(PlayerJoinEvent.class, event -&gt; {\n    event.getPlayer().sendMessage(\"Welcome to the server!\");\n});\nlistener.unregister();\n</code></pre>"},{"location":"pages/utils/head-builder/","title":"HeadBuilder","text":"<p>HeadBuilder is a class that allows you to create heads. It returns an  ItemBuilder with the head as the item. It is a wrapper for the Bukkit class <code>ItemStack</code>.</p>"},{"location":"pages/utils/head-builder/#create","title":"Create","text":"<p>To create a HeadBuilder, you need to use the constructor.</p> KotlinJava Main.kt<pre><code>val head = HeadBuilder(player)\n\n// OR\n\nval head = HeadBuilder(texture)\n</code></pre> Main.java<pre><code>ItemStack head = new HeadBuilder(player);\n\n// OR\n\nItemStack head = new HeadBuilder(texture);\n</code></pre>"},{"location":"pages/utils/head-builder/#get-builder","title":"Get Builder","text":"<p>To get the builder, you can use the <code>getBuilder</code> method. This will return an ItemBuilder with the head as the item.</p> KotlinJava Main.kt<pre><code>val builder = head.getBuilder()\n</code></pre> Main.java<pre><code>ItemBuilder builder = head.getBuilder();\n</code></pre> <p>Note</p> <p>The method to get the head of a player-name will be added soon. :)</p>"},{"location":"pages/utils/item-builder/","title":"ItemBuilder","text":"<p>ItemBuilder is a class that allows you to create items with ease. It is a wrapper for the Bukkit class <code>ItemStack</code>.</p>"},{"location":"pages/utils/item-builder/#create","title":"Create","text":"<p>To create an ItemBuilder, you need to use the constructor. The <code>amount</code> is optional  and defaults to <code>1</code>.</p> KotlinJava Main.kt<pre><code>val item = ItemBuilder(material, amount)\n\n// OR\n\nval item = ItemBuilder(itemStack)\n</code></pre> Main.java<pre><code>ItemStack item = new ItemBuilder(material, amount);\n\n// OR\n\nItemStack item = new ItemBuilder(itemStack);\n</code></pre>"},{"location":"pages/utils/item-builder/#amount","title":"Amount","text":"<p>To set the amount of the item, you can use the <code>amount</code> property in the constructor or the <code>setAmount</code> method.</p> KotlinJava Main.kt<pre><code>item.setAmount(5)\n</code></pre> Main.java<pre><code>item.setAmount(5);\n</code></pre>"},{"location":"pages/utils/item-builder/#display-name","title":"Display Name","text":"<p>To set the display name of the item, you can use the <code>setDisplayName</code> method. This method uses the Adventure Color Codes.</p> KotlinJava Main.kt<pre><code>item.setDisplayName(\"My Item\")\n</code></pre> Main.java<pre><code>item.setDisplayName(\"My Item\");\n</code></pre>"},{"location":"pages/utils/item-builder/#lore","title":"Lore","text":"<p>To set the lore of the item, you can use the <code>setLore</code> method or the <code>addLore</code> method. This method uses the Adventure Color Codes.</p> KotlinJava Main.kt<pre><code>item.setLore(listOf(\"Line 1\", \"Line 2\")) // Sets the lore\nitem.addLore(\"Line 3\") // Adds a line to the lore\n</code></pre> Main.java<pre><code>item.setLore(Arrays.asList(\"Line 1\", \"Line 2\")); // Sets the lore\nitem.addLore(\"Line 3\"); // Adds a line to the lore\n</code></pre>"},{"location":"pages/utils/item-builder/#invisible-enchantment","title":"Invisible Enchantment","text":"<p>To toggle the invisible enchantment, you can use the <code>setInvisibleEnchantment</code> method.</p> KotlinJava Main.kt<pre><code>item.setInvisibleEnchantment(true) // Makes the item glow\n</code></pre> Main.java<pre><code>item.setInvisibleEnchantment(true); // Makes the item glow\n</code></pre> <p>Not finished</p> <p>This method is not finished yet. It will get more options in the future.</p>"}]}